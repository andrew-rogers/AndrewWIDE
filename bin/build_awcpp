#!/bin/sh

DIR=$(cd "$(dirname $1)" && pwd)
DIR=$(dirname "$DIR")
CGI=$(basename "$DIR")
NAME=$(echo $(basename $1) | sed "s/\.awcpp$//")
echo "D>$DIR" >&2
echo "N>$NAME" >&2

cpp_wrapper()
{
    OUT="$DIR/func.d/${NAME}_aw.cpp"
    GLOBALS="globals.h"
    echo "// This file is automatically generated by AndrewWIDE, changes may be lost." > $OUT
    echo '' >> $OUT
    echo '#include "plot.h"' >> $OUT
    echo '#include "trace.h"' >> $OUT
    echo '#include "math.h"' >> $OUT
    echo '#include "awmath.h"' >> $OUT
    echo '' >> $OUT
    if [ -f "$DIR/$GLOBALS" ]; then
        echo '// Include globals.' >> $OUT
        echo "#include \"../$GLOBALS\"" >> $OUT
        echo '' >> $OUT
    fi
    echo "void $NAME()" >> $OUT
    echo "{" >> $OUT
    cat "$DIR/func.d/$NAME.awcpp" >> $OUT
    echo "}" >> $OUT

    OUT="$DIR/func.d/${NAME}_aw.h"
    GUARD="${NAME}_H"
    echo "// This file is automatically generated by AndrewWIDE, changes may be lost." > $OUT
    echo '' >> $OUT
    echo "#ifndef $GUARD" >> $OUT
    echo "#define $GUARD" >> $OUT
    echo '' >> $OUT
    echo "void $NAME();" >> $OUT
    echo '' >> $OUT
    echo "#endif //$GUARD" >> $OUT
}

cpp_main()
{
    OUT="$DIR/${CGI}_awmain.cpp"
    echo "// This file is automatically generated by AndrewWIDE, changes may be lost." > $OUT
    echo '' >> $OUT
    echo '// Include all the functions.' >> $OUT
    find "$DIR/func.d/" | sed -n "s|.*/\(.*\)_aw.h|#include \"func.d/\1_aw.h\"|p" >> $OUT
cat >> "$OUT" <<EOF

#include "cgi_post.h"
#include <map>
#include <string>

using namespace std;

int main(int argc, char *args[])
{
    getQuery();

    // Create map of functions.
    map<string,void(*)()> functions;
EOF
    find "$DIR/func.d/" | sed -n "s|.*/\(.*\)_aw.h|    functions[\"\1\"]=\1;|p" >> $OUT
cat >> "$OUT" <<EOF

    string func_name(g_query["name"].str());

    // Search for function and call it if it exists.
    auto func=functions.find(func_name);
    if( func!=functions.end() )
    {
        func->second();
    }
    else
    {
        g_response["error"]="Function not found: "+func_name;
    }

    sendResponse();

    return 0;
}
EOF
}

cpp_wrapper
cpp_main
(cd "$DIR" && make CGI="$CGI" -f "$AW_DIR/lib/awcpp.makefile") 2>&1
echo "JSON{\"bin\":\"$DIR/$CGI\",\"name\":\"$NAME\",\"error\":\"$?\"}"

