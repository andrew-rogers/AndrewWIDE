AW{"type":"mjmd"}
WebAssembly
===========

Using [WebAssembly](https://webassembly.org/) it is possbile to run the compiled C++ code in the browser. This makes it possible to produce documentation that viewers can interact with without the use of a server. However, the C++ has to be compiled to webassembly using a server. Once compiled, the WebAssembly can be run in the browser taking paramaters from the document.

Experimental
------------

To get started with WebAssembly support it was necessary to understand how the WebAssembly, or *wasm*, could be integrated into an AwDoc. Two important concepts had to be proven before investing further development effort:

- Running the wasm
- Passing JSON to and from the wasm

AW{"type":"awcppwasm"}
#include "json.h"

#include <stdlib.h>
#include <string.h>
#include <emscripten.h>


char *g_str_query;

Json g_query;
Json g_response;

EMSCRIPTEN_KEEPALIVE
extern "C" void set_query(char* query)
{
    g_str_query = (char*)malloc(strlen(query)+1);
    if(g_str_query)
    {
        char* p=query;
        char* o=g_str_query;
        while(*p != '\0')
        {
            *o = (*p);
            o++;
            p++;
        } 
        *o = '\0';
    }
}

EMSCRIPTEN_KEEPALIVE
extern "C" const char* get_response()
{
    std::string str;
    g_response.stringify(str);
    return str.c_str();
}

EMSCRIPTEN_KEEPALIVE
extern "C" void myplot()
{
    Json data;
    data[0]=0;
    data[1]=1.4;
    data[2]=2;
    data[3]=0;
    data[4]=1;
    data[5]=2;
    g_response["type"]="plot";
    g_response["data"]=data;
}


