AW{"type":"awcppwasm","id":"mk","hidden":true}

TARGET = src.wasm
LDFLAGS += --no-entry

AW{"type":"awcppwasm", "id":"globals"}

EMSCRIPTEN_KEEPALIVE
extern "C" void* allocBuffer(size_t n)
{
    return malloc(n);
}

AW{"type":"jss"}

console.log(AndrewWIDE.wasm.exports.allocBuffer(9));

AW{"type":"jss"}

let dir = "external/WasmDSP/";

function gotWasm(e) {
    WasmDSP.importModules([dir + "modules/signal.js"]).then(gotSignal);
}

function gotSignal() {
    let bq = new WasmDSP.modules.signal.Biquad(1,0,1,0.5,0.6);
    let resp = bq.process([1,0,0,0,0,0,0]);
    console.log("resp ",resp);
}

let scr = document.createElement("script");
scr.src = dir + "WasmDSP.js";
scr.addEventListener("load",gotWasm);
document.head.appendChild(scr);

AW{"type":"jss"}

// Does not run because WasmDSP importing in asynchronous.
let bq = new WasmDSP.modules.signal.Biquad(1,0,1,0.5,0.6);
let resp = bq.process([1,0,0,0,0,0,0]);
console.log("resp ",resp);

