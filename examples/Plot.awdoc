AW{"type":"mjmd"}

1. Push values in JSArray
2. Plot JSArray
3. Get values from textarea

* JSArray is a WasmDSP class
* Plot is an AndrewWIDE class

AW{"type":"wasmcpp","id":"globals","hidden":true}
#include "JSArray.h"
#include "emjs.h"

AW{"type":"javascript"}
// Define the import because the shared wasm requires it even though we don't use it here
// TODO: Replace import with mediator or eval
AndrewWIDE.addWasmImport("thing", function(n){
    console.log("Thing> "+n);
});

AW{"type":"wasmcpp"}
WasmDSP::JSArray j("my_array");
float vals[] = {0.1, 0.2, 0.34};
j.write(vals, 3);
WasmDSP::jsEval("console.log('Hello!');console.log(wasm_module)");

AW{"type":"javascript"}
let y=[1,3,5,2]
plot(y)
plot(AndrewWIDE.wasm_mod.arrays.my_array)

AW{"type":"mono","id":"some_samples"}
samples: 0.4,-0.1,2.718,1.414

AW{"type":"javascript","inputs":["some_samples"]}
let s = getInput('some_samples')
let i = s.indexOf(':')
let name = s.substr(0,i).trim()
let vals = JSON.parse('[' + s.substr(i+1) + ']')
let a = AndrewWIDE.getWasmArray(name)
a.length = 0
a.push(...vals)

AW{"type":"javascript"}
AndrewWIDE.loadWasmDSPModules(['signal'])

AW{"type":"javascript"}
let bq = new AndrewWIDE.WasmDSP.modules.signal.Biquad(1,0,1,-1.9,0.97);
let x=[1];
for (let i=0; i<400; i++) x.push(0);
let resp = bq.process(x);
plot(resp);
